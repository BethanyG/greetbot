<!DOCTYPE html>
<html>
<head>
	<title><%= title %></title>
	<link href="https://stackpath.bootstrapcdn.com/bootswatch/4.1.0/lumen/bootstrap.min.css" rel="stylesheet" integrity="sha384-3peic20OBS+kS9351sQOOO1LJYgA7iQkz8mjQQIGqCWy+rkEEOGIIIgQrVqL88+X" crossorigin="anonymous">

	<style type="text/css">
		#readResourceMediaDesc {
			height: 300px;
			max-height: 185px;
			overflow-x: scroll;
		}
		.emoji {
			width: 32px;
			height: 32px;
			margin-top: -0.375rem;
			margin-bottom: -0.375rem;
		}
		code {
			font-family:Monaco,Menlo,Consolas,"Courier New",monospace!important;
			font-size:.75rem;
			line-height:.75rem;
			white-space:normal;
			color:#d72b3f;
			padding:2px 3px 1px;
			-webkit-font-variant-ligatures:none;
			font-variant-ligatures:none;
			tab-size:4;
			-moz-tab-size:4;
			-o-tab-size:4;
			-webkit-tab-size:4
		}
	</style>
</head>
<body>
	<div class="container">
		<div class="jumbotron text-center">
			<h1>Info about this body template</h1>
			<p class="lead">
				<a class="btn btn-warning btn-lg" href="/templates/bodies/">Back to body templates list</a>
			</p>
		</div>
		<div class="row">
			<div class="col-sm">
				<%- include partials/edit_form %>
			</div>
			<div class="col-sm">
				<%- include partials/readonly_form %>
			</div>
		</div>
	</div>


	<script type="text/javascript">
		/* jshint esversion: 6 */
		const emoji_map = {
			":heavy_plus:": "\u2795",
			":cinema:": "\uD83C\uDFA6",
			":books:": "\uD83D\uDCDA",
			":link:": "\uD83D\uDD17",
			":school_satchel:": "\uD83C\uDF92",
			":star:": "\u2B50",
			":white_check_mark:": "\u2705",
			":question:": "\u2753",
			":javascript:": "<img class='emoji' src='/images/javascript.png' />",
			":atrain:": "<img class='emoji' src='/images/atrain.png' />",
		};

		const generateFilePath = () => {
			const language = document.getElementById('bodyTemplateLanguage').value;
			const level = document.getElementById('bodyTemplateLevel').value;
			const name = document.getElementById('bodyTemplateName').value;
			const path = `${language}/${level}/${name}.yml`;
			document.getElementById('readBodyTemplatePath').innerHTML = path;
		}

		const convert_to_link = (text) => {
			return text.replace(/<([^|]*?)\|(.*?)>/g, "<a href=\"$1\">$2</a>");
		}

		const convert_styles = (text) => {
			return text.replace(/\*(.*?)\*/g, "<b>$1</b>")
								.replace(/\_(.*?)\_/g, "<em>$1</em>")
								.replace(/\`(.*?)\`/g, "<code>$1</code>")
								.replace(/(\#[0-9a-fA-F]{1,6})/g, "<span style=\"color: $1\">$1</span>")
								.replace(/[\n\r]/g, "<br />");
		}

		const convert_emoji = (text) => {
			let new_text = text;
			Object.entries(emoji_map).forEach(([key, value]) => {
				new_text = new_text.replace(new RegExp(key, 'g'), value);
			});
			return new_text;
		}

		const convert_text = (target) => {
			const edit_field = target;
			const read_field_id = edit_field.id.replace("body", "readBody");
			const read_field = document.getElementById(read_field_id);
			const current_text = edit_field.value;
			let new_text = current_text;
			new_text = convert_emoji(new_text);
			new_text = convert_to_link(new_text);
			new_text = convert_styles(new_text);
			read_field.innerHTML = new_text;
			generateFilePath();
		}

		const inputs = Array.from(document.querySelectorAll('.edit-form'));
		inputs.forEach(input => {
			convert_text(input);
			generateFilePath();
			input.addEventListener('keyup', evt => convert_text(evt.target))
		});
	</script>

</body>
</html>
